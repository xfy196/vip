{"version":3,"sources":["libs/validate/additional-methods.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","factory","define","amd","module","exports","require","jQuery","$","stripHtml","value","replace","validator","addMethod","element","params","this","optional","match","length","format","valueStripped","regex","checksum","tokens","split","i","parseInt","param","typeParam","optionalValue","attr","files","RegExp","type","test","pos","account","sum","len","substring","methods","bankaccountNL","call","giroaccountNL","toUpperCase","n","control_digit","control_letter","cifRegEx","letter","number","control","even_sum","odd_sum","toString","substr","firstChar","firstCN","secondCN","j","dsc","charAt","Array","join","String","concat","tamanho","numeros","digitos","soma","resultado","il","checkResult","cn","result","cDigit","nCheck","nDigit","bEven","validTypes","mastercard","visa","amex","dinersclub","enroute","discover","jcb","unknown","all","isParamString","symbol","soft","messages","date","adata","gg","mm","aaaa","xdata","check","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","target","settings","onfocusout","not","addClass","on","valid","val","ibancheck","bbanpattern","p","iban","ibancheckdigits","leadingZeroes","cRest","AL","AD","AT","AZ","BE","BH","BA","BR","BG","CR","HR","CY","CZ","DK","DO","EE","FO","FI","FR","GE","DE","GI","GR","GL","GT","HU","IS","IE","IL","IT","KZ","KW","LV","LB","LI","LT","LU","MK","MT","MR","MU","MC","MD","ME","NL","NO","PK","PS","PL","PT","RO","SM","SA","RS","SK","SI","ES","SE","CH","TN","TR","AE","GB","VG","indexOf","size","totalSize","phone_number","ruPhone_number","nieRegEx","arrSteps","intSum","int2","dv","count","multiplier","equalTo","cep_value","options","$fields","form","$fieldsFirst","eq","data","extend","isValid","filter","elementValue","each","numberFilled","isDefault","caseSensitive","includeTerritories","includeMilitary","text","url","v","d","f","cd","cdv","LL","VL","FL","rs","slice","isNaN"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAmV,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,IAUnX,SAAWK,GACa,mBAAXC,QAAyBA,OAAOC,IACzCD,OAAO,CAAC,SAAU,qBAAsBD,GACqC,YAAjD,oBAAXG,OAAyB,YAAcT,QAAQS,UAAyBA,OAAOC,QAChGD,OAAOC,QAAUJ,EAAQK,QAAQ,WAEjCL,EAAQM,QANZ,CAQG,SAAUC,GAET,SAASC,EAAUC,GAEjB,OAAOA,EAAMC,QAAQ,cAAe,KAAKA,QAAQ,kBAAmB,KACnEA,QAAQ,+BAAgC,IAk8C7C,OA/7CEH,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,EAASC,GAC1D,OAAOC,KAAKC,SAASH,IAAYL,EAAUC,GAAOQ,MAAM,YAAYC,QAAUJ,GAC7EP,EAAEI,UAAUQ,OAAO,oCACtBZ,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,EAASC,GAC1D,OAAOC,KAAKC,SAASH,IAAYL,EAAUC,GAAOQ,MAAM,YAAYC,QAAUJ,GAC7EP,EAAEI,UAAUQ,OAAO,qCACtBZ,EAAEI,UAAUC,UAAU,aAAc,SAAUH,EAAOI,EAASC,GAC5D,IAAIM,EAAgBZ,EAAUC,GAC1BY,EAAQ,WACZ,OAAON,KAAKC,SAASH,IAAYO,EAAcH,MAAMI,GAAOH,QAAUJ,EAAO,IAAMM,EAAcH,MAAMI,GAAOH,QAAUJ,EAAO,IAC9HP,EAAEI,UAAUQ,OAAO,4CAUxBZ,EAAEI,UAAUC,UAAU,mBAAoB,SAAUH,GAClD,IAAIa,EAAW,EACXC,EAASd,EAAMe,MAAM,IACrBN,EAASK,EAAOL,OAEpB,GAAe,IAAXA,EACF,OAAO,EAKT,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAQO,GAAK,EAC/BH,GAAsC,EAA1BI,SAASH,EAAOE,GAAI,IAAwC,EAA9BC,SAASH,EAAOE,EAAI,GAAI,IAAUC,SAASH,EAAOE,EAAI,GAAI,IAItG,OAAiB,IAAbH,GAAkBA,EAAW,IAAO,GAKvC,wCAEHf,EAAEI,UAAUC,UAAU,SAAU,SAAUH,EAAOI,EAASc,GAExD,IAEIF,EAEAJ,EAJAO,EAA6B,iBAAVD,EAAqBA,EAAMjB,QAAQ,MAAO,IAAM,UACnEmB,EAAgBd,KAAKC,SAASH,GAKlC,GAAIgB,EACF,OAAOA,EAGT,GAAgC,SAA5BtB,EAAEM,GAASiB,KAAK,UAIlBF,EAAYA,EAAUlB,QAAQ,oCAAqC,QAAQA,QAAQ,KAAM,KAAKA,QAAQ,QAAS,OAE3GG,EAAQkB,OAASlB,EAAQkB,MAAMb,QAGjC,IAFAG,EAAQ,IAAIW,OAAO,MAAQJ,EAAY,KAAM,KAExCH,EAAI,EAAGA,EAAIZ,EAAQkB,MAAMb,OAAQO,IAGpC,IAFOZ,EAAQkB,MAAMN,GAEXQ,KAAKhB,MAAMI,GACnB,OAAO,EAQf,OAAO,GACNd,EAAEI,UAAUQ,OAAO,gDACtBZ,EAAEI,UAAUC,UAAU,eAAgB,SAAUH,EAAOI,GACrD,OAAOE,KAAKC,SAASH,IAAY,SAASqB,KAAKzB,IAC9C,iDAQHF,EAAEI,UAAUC,UAAU,gBAAiB,SAAUH,EAAOI,GACtD,GAAIE,KAAKC,SAASH,GAChB,OAAO,EAGT,IAAK,oCAAoCqB,KAAKzB,GAC5C,OAAO,EAIT,IAII0B,EAJAC,EAAU3B,EAAMC,QAAQ,KAAM,IAElC2B,EAAM,EACFC,EAAMF,EAAQlB,OAKlB,IAAKiB,EAAM,EAAGA,EAAMG,EAAKH,IAGvBE,IAFSC,EAAMH,GACPC,EAAQG,UAAUJ,EAAKA,EAAM,GAIvC,OAAOE,EAAM,IAAO,GACnB,8CACH9B,EAAEI,UAAUC,UAAU,sBAAuB,SAAUH,EAAOI,GAC5D,OAAOE,KAAKC,SAASH,IAAYN,EAAEI,UAAU6B,QAAQC,cAAcC,KAAK3B,KAAMN,EAAOI,IAAYN,EAAEI,UAAU6B,QAAQG,cAAcD,KAAK3B,KAAMN,EAAOI,IACpJ,sDAiBHN,EAAEI,UAAUC,UAAU,MAAO,SAAUH,EAAOI,GAC5C,OAAOE,KAAKC,SAASH,IAAY,gEAAgEqB,KAAKzB,EAAMmC,gBAC3G,mCAoDHrC,EAAEI,UAAUC,UAAU,QAAS,SAAUH,EAAOI,GAG9C,GAAIE,KAAKC,SAASH,GAChB,OAAO,EAGT,IAUIY,EACAoB,EACAC,EACAC,EAbAC,EAAW,IAAIhB,OAAO,iDACtBiB,EAASxC,EAAM8B,UAAU,EAAG,GAEhCW,EAASzC,EAAM8B,UAAU,EAAG,GAE5BY,EAAU1C,EAAM8B,UAAU,EAAG,GAGzBa,EAAW,EACXC,EAAU,EAWd,GAAqB,IAAjB5C,EAAMS,SAAiB8B,EAASd,KAAKzB,GACvC,OAAO,EAGT,IAAKgB,EAAI,EAAGA,EAAIyB,EAAOhC,OAAQO,IAC7BoB,EAAInB,SAASwB,EAAOzB,GAAI,IAEdA,EAXC,GAAM,EAef4B,IAFAR,GAAK,GAEU,GAAKA,EAAIA,EAAI,EAG5BO,GAAYP,EAShB,OAJAC,GAAiB,IADPM,EAAWC,GACSC,WAAWC,QAAQ,IAAID,WACrDR,EAA8C,EAA9BpB,SAASoB,EAAe,IAAU,IAAMA,EACxDC,EAAiB,aAAaQ,OAAOT,EAAe,GAAGQ,WAEnDL,EAAOhC,MAAM,UACRkC,IAAYL,GACVG,EAAOhC,MAAM,WAKjBkC,IAAYL,GAJVK,IAAYJ,GAKpB,sCAMHxC,EAAEI,UAAUC,UAAU,QAAS,SAAUH,GAIvC,GAAqB,MAFrBA,EAAQA,EAAMC,QAAQ,8CAA+C,KAE3DQ,OACR,OAAO,EAGT,IAEIsC,EACAC,EACAC,EACAjC,EACAkC,EANAtB,EAAM,EACNuB,EAAM,EASV,GAFAJ,EAAY/C,EAAMoD,OAAO,GAErB,IAAIC,MAAM,IAAIC,KAAKP,KAAe/C,EACpC,OAAO,EAIT,IAAYkD,EAAI,EAAXlC,EAAI,EAAiBA,EAAI,IAAKA,IAAKkC,EACtCtB,IAAS5B,EAAMoD,OAAOpC,GAAKkC,EAY7B,IAPe,KAFfF,EAAUpB,EAAM,MAGdoB,EAAU,EACVG,EAAM,GAKID,EAAI,EAAXlC,EAFLY,EAAM,EAEoBZ,EAAI,IAAKA,IAAKkC,EACtCtB,IAAS5B,EAAMoD,OAAOpC,GAAKkC,EAW7B,OANgB,KAFhBD,EAAWrB,EAAM,IAGfqB,EAAW,EAEXA,GAAsBE,EAGjBI,OAAOP,GAASQ,OAAOP,KAAcjD,EAAM8C,QAAQ,IACzD,qCAMHhD,EAAEI,UAAUC,UAAU,SAAU,SAAUH,EAAOI,GAG/C,GAAIE,KAAKC,SAASH,GAChB,OAAO,EAMT,GAAqB,MAFrBJ,EAAQA,EAAMC,QAAQ,UAAW,KAEvBQ,OACR,OAAO,EAIT,GAAc,mBAAVT,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,GAAwC,mBAAVA,EAChR,OAAO,EAUT,IANA,IAAIyD,EAAUzD,EAAMS,OAAS,EACzBiD,EAAU1D,EAAM8B,UAAU,EAAG2B,GAC7BE,EAAU3D,EAAM8B,UAAU2B,GAC1BG,EAAO,EACPlC,EAAM+B,EAAU,EAEXzC,EAAIyC,EAAc,GAALzC,EAAQA,IAC5B4C,GAAQF,EAAQN,OAAOK,EAAUzC,GAAKU,IAElCA,EAAM,IACRA,EAAM,GAIV,IAAImC,EAAYD,EAAO,GAAK,EAAI,EAAI,GAAKA,EAAO,GAEhD,GAAIC,IAAc5C,SAAS0C,EAAQP,OAAO,GAAI,IAC5C,OAAO,EAGTK,GAAoB,EACpBC,EAAU1D,EAAM8B,UAAU,EAAG2B,GAC7BG,EAAO,EACPlC,EAAM+B,EAAU,EAEhB,IAAK,IAAIK,EAAKL,EAAe,GAANK,EAASA,IAC9BF,GAAQF,EAAQN,OAAOK,EAAUK,GAAMpC,IAEnCA,EAAM,IACRA,EAAM,GAMV,OAFAmC,EAAYD,EAAO,GAAK,EAAI,EAAI,GAAKA,EAAO,MAE1B3C,SAAS0C,EAAQP,OAAO,GAAI,KAK7C,sCAMHtD,EAAEI,UAAUC,UAAU,QAAS,SAAUH,EAAOI,GAG9C,GAAIE,KAAKC,SAASH,GAChB,OAAO,EAMT,GAAqB,MAFrBJ,EAAQA,EAAMC,QAAQ,8CAA+C,KAE3DQ,OACR,OAAO,EAGT,IACIuC,EACAC,EACAc,EACA/C,EAJAY,EAAM,EAmBV,GAdAoB,EAAU/B,SAASjB,EAAM8B,UAAU,EAAG,IAAK,IAC3CmB,EAAWhC,SAASjB,EAAM8B,UAAU,GAAI,IAAK,IAE7CiC,EAAc,SAAqBnC,EAAKoC,GACtC,IAAIC,EAAe,GAANrC,EAAW,GAMxB,OAJe,KAAXqC,GAA4B,KAAXA,IACnBA,EAAS,GAGJA,IAAWD,GAIN,KAAVhE,GAA0B,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,GAAqC,gBAAVA,EACrQ,OAAO,EAIT,IAAKgB,EAAI,EAAGA,GAAK,EAAGA,IAClBY,GAAYX,SAASjB,EAAM8B,UAAUd,EAAI,EAAGA,GAAI,KAAO,GAAKA,GAI9D,GAAI+C,EAAYnC,EAAKoB,GAAU,CAG7B,IAFApB,EAAM,EAEDZ,EAAI,EAAGA,GAAK,GAAIA,IACnBY,GAAYX,SAASjB,EAAM8B,UAAUd,EAAI,EAAGA,GAAI,KAAO,GAAKA,GAG9D,OAAO+C,EAAYnC,EAAKqB,GAG1B,OAAO,GACN,qCAGHnD,EAAEI,UAAUC,UAAU,aAAc,SAAUH,EAAOI,GACnD,GAAIE,KAAKC,SAASH,GAChB,MAAO,sBAIT,GAAI,aAAaqB,KAAKzB,GACpB,OAAO,EAGT,IAGIoC,EACA8B,EAJAC,EAAS,EACTC,EAAS,EACTC,GAAQ,EAMZ,IAHArE,EAAQA,EAAMC,QAAQ,MAAO,KAGnBQ,OAAS,IAAqB,GAAfT,EAAMS,OAC7B,OAAO,EAGT,IAAK2B,EAAIpC,EAAMS,OAAS,EAAQ,GAAL2B,EAAQA,IACjC8B,EAASlE,EAAMoD,OAAOhB,GACtBgC,EAASnD,SAASiD,EAAQ,IAEtBG,GACkB,GAAfD,GAAU,KACbA,GAAU,GAIdD,GAAUC,EACVC,GAASA,EAGX,OAAOF,EAAS,IAAO,GACtB,4CAMHrE,EAAEI,UAAUC,UAAU,kBAAmB,SAAUH,EAAOI,EAASc,GACjE,GAAI,YAAYO,KAAKzB,GACnB,OAAO,EAGTA,EAAQA,EAAMC,QAAQ,MAAO,IAC7B,IAAIqE,EAAa,EAsCjB,OApCIpD,EAAMqD,aACRD,GAAc,GAGZpD,EAAMsD,OACRF,GAAc,GAGZpD,EAAMuD,OACRH,GAAc,GAGZpD,EAAMwD,aACRJ,GAAc,GAGZpD,EAAMyD,UACRL,GAAc,IAGZpD,EAAM0D,WACRN,GAAc,IAGZpD,EAAM2D,MACRP,GAAc,IAGZpD,EAAM4D,UACRR,GAAc,KAGZpD,EAAM6D,MACRT,EAAa,KAGE,EAAbA,IAAwB,cAAc7C,KAAKzB,IAAU,eAAeyB,KAAKzB,KAK5D,EAAbsE,GAAuB,OAAO7C,KAAKzB,GAHb,KAAjBA,EAAMS,OAQE,EAAb6D,GAAuB,WAAW7C,KAAKzB,GAEjB,KAAjBA,EAAMS,OAGE,EAAb6D,GAAuB,uBAAuB7C,KAAKzB,GAE7B,KAAjBA,EAAMS,OAGE,GAAb6D,GAAuB,gBAAgB7C,KAAKzB,GAEtB,KAAjBA,EAAMS,OAGE,GAAb6D,GAAuB,UAAU7C,KAAKzB,IAKzB,GAAbsE,GAAuB,OAAO7C,KAAKzB,GAHb,KAAjBA,EAAMS,OAQE,GAAb6D,GAAuB,eAAe7C,KAAKzB,GAErB,KAAjBA,EAAMS,UAGE,IAAb6D,IAMH,4CA8BHxE,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,EAASc,GAC1D,IAGIN,EAHAoE,EAAiC,iBAAV9D,EACvB+D,EAASD,EAAgB9D,EAAQA,EAAM,GACvCgE,EAAOF,GAAuB9D,EAAM,GAMxC,OAJA+D,EAASA,EAAOhF,QAAQ,KAAM,IAE9BW,EAAQ,MADRqE,EAASC,EAAOD,EAAS,IAAMA,EAAS,MAChB,2HACxBrE,EAAQ,IAAIW,OAAOX,GACZN,KAAKC,SAASH,IAAYQ,EAAMa,KAAKzB,IAC3C,mCACHF,EAAEI,UAAUC,UAAU,SAAU,SAAUH,EAAOI,GAC/C,OAAOE,KAAKC,SAASH,IAAY,iHAAiHqB,KAAKzB,IACtJF,EAAEI,UAAUiF,SAASC,MAqBxBtF,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,GAChD,IAEIiF,EACAC,EACAC,EACAC,EACAC,EANAC,GAAQ,EAwBZ,OARIA,IAfK,4BAOFjE,KAAKzB,KACVqF,EAAQrF,EAAMe,MAAM,KACpBuE,EAAKrE,SAASoE,EAAM,GAAI,IACxBE,EAAKtE,SAASoE,EAAM,GAAI,IACxBG,EAAOvE,SAASoE,EAAM,GAAI,KAC1BI,EAAQ,IAAIE,KAAKA,KAAKC,IAAIJ,EAAMD,EAAK,EAAGD,EAAI,GAAI,EAAG,EAAG,KAE5CO,mBAAqBL,GAAQC,EAAMK,gBAAkBP,EAAK,GAAKE,EAAMM,eAAiBT,GAS3FhF,KAAKC,SAASH,IAAYsF,GAChC5F,EAAEI,UAAUiF,SAASC,MACxBtF,EAAEI,UAAUC,UAAU,SAAU,SAAUH,EAAOI,GAC/C,OAAOE,KAAKC,SAASH,IAAY,0EAA0EqB,KAAKzB,IAC/GF,EAAEI,UAAUiF,SAASC,MAExBtF,EAAEI,UAAUC,UAAU,YAAa,SAAUH,EAAOI,EAASc,GAE3D,OADAA,EAAyB,iBAAVA,EAAqBA,EAAMjB,QAAQ,KAAM,KAAO,gBACxDK,KAAKC,SAASH,IAAYJ,EAAMQ,MAAM,IAAIe,OAAO,OAASL,EAAQ,KAAM,OAC9EpB,EAAEI,UAAUQ,OAAO,iDAKtBZ,EAAEI,UAAUC,UAAU,gBAAiB,SAAUH,EAAOI,GACtD,OAAOE,KAAKC,SAASH,IAAY,eAAeqB,KAAKzB,IACpD,8CACHF,EAAEI,UAAUC,UAAU,cAAe,SAAUH,EAAOI,EAASc,GAC7D,IAAI8E,EAASlG,EAAEoB,GAQf,OANIZ,KAAK2F,SAASC,YAAcF,EAAOG,IAAI,8BAA8B1F,QACvEuF,EAAOI,SAAS,6BAA6BC,GAAG,4BAA6B,WAC3EvG,EAAEM,GAASkG,UAIRtG,EAAQgG,EAAOO,OACrB,iCACHzG,EAAEI,UAAUC,UAAU,mBAAoB,SAAUH,EAAOI,EAASc,GAClE,IAAI8E,EAASlG,EAAEoB,GAQf,OANIZ,KAAK2F,SAASC,YAAcF,EAAOG,IAAI,mCAAmC1F,QAC5EuF,EAAOI,SAAS,kCAAkCC,GAAG,iCAAkC,WACrFvG,EAAEM,GAASkG,UAIRtG,GAASgG,EAAOO,OACtB,iCAQHzG,EAAEI,UAAUC,UAAU,OAAQ,SAAUH,EAAOI,GAE7C,GAAIE,KAAKC,SAASH,GAChB,OAAO,EAIT,IAMIoG,EACApD,EAEAqD,EAGAzF,EACA0F,EAbAC,EAAO3G,EAAMC,QAAQ,KAAM,IAAIkC,cAC/ByE,EAAkB,GAClBC,GAAgB,EAChBC,EAAQ,GAkBZ,GAAIH,EAAKlG,OAFe,EAGtB,OAAO,EA+ET,QAA2B,KAR3BgG,EAlEsB,CACpBM,GAAM,qBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,4BACNC,GAAM,UACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,kBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,4BACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,0BACNC,GAAM,UACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,2BACNC,GAAM,qBACNC,GAAM,uBACNC,GAAM,uBACNC,GAAM,qBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,2BACNC,GAAM,6BACNC,GAAM,UACNC,GAAM,0BACNC,GAAM,4BACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,kBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,uBACNC,GAAM,2BACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,UACNC,GAAM,qBACNC,GAAM,gBACNC,GAAM,kBACNC,GAAM,sBAjEMnE,EAAK7E,UAAU,EAAG,OA4EjB,IAAIP,OAAO,kBAAoBkF,EAAc,IAAK,IAE/ChF,KAAKkF,GACnB,OAAO,EAOX,IAFAH,EAAYG,EAAK7E,UAAU,EAAG6E,EAAKlG,QAAUkG,EAAK7E,UAAU,EAAG,GAE1Dd,EAAI,EAAGA,EAAIwF,EAAU/F,OAAQO,IAGjB,OAFfoC,EAASoD,EAAUpD,OAAOpC,MAGxB6F,GAAgB,GAGbA,IACHD,GAAmB,uCAAuCmE,QAAQ3H,IAKtE,IAAKsD,EAAI,EAAGA,EAAIE,EAAgBnG,OAAQiG,IAGtCI,GADY,GAAKA,EADTF,EAAgBxD,OAAOsD,IAEX,GAGtB,OAAiB,IAAVI,GACN,+BACHhH,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,GAChD,OAAOE,KAAKC,SAASH,IAAY,UAAUqB,KAAKzB,IAC/C,oDACHF,EAAEI,UAAUC,UAAU,OAAQ,SAAUH,EAAOI,GAC7C,OAAOE,KAAKC,SAASH,IAAY,gIAAgIqB,KAAKzB,IACrK,uCACHF,EAAEI,UAAUC,UAAU,OAAQ,SAAUH,EAAOI,GAC7C,OAAOE,KAAKC,SAASH,IAAY,q2BAAq2BqB,KAAKzB,IAC14B,uCACHF,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,EAASc,GAC1D,IAAI8E,EAASlG,EAAEoB,GAQf,OANIZ,KAAK2F,SAASC,YAAcF,EAAOG,IAAI,2BAA2B1F,QACpEuF,EAAOI,SAAS,0BAA0BC,GAAG,yBAA0B,WACrEvG,EAAEM,GAASkG,UAIRtG,EAAQgG,EAAOO,OACrB,gCACHzG,EAAEI,UAAUC,UAAU,gBAAiB,SAAUH,EAAOI,EAASc,GAC/D,IAAI8E,EAASlG,EAAEoB,GAQf,OANIZ,KAAK2F,SAASC,YAAcF,EAAOG,IAAI,gCAAgC1F,QACzEuF,EAAOI,SAAS,+BAA+BC,GAAG,8BAA+B,WAC/EvG,EAAEM,GAASkG,UAIRtG,GAASgG,EAAOO,OACtB,gCACHzG,EAAEI,UAAUC,UAAU,cAAe,SAAUH,EAAOI,GACpD,OAAOE,KAAKC,SAASH,IAAY,YAAYqB,KAAKzB,IACjD,uBACHF,EAAEI,UAAUC,UAAU,uBAAwB,SAAUH,EAAOI,GAC7D,OAAOE,KAAKC,SAASH,IAAY,sBAAsBqB,KAAKzB,IAC3D,sCAEHF,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,EAASc,GAC1D,QAAIZ,KAAKC,SAASH,MAIc,SAA5BN,EAAEM,GAASiB,KAAK,SACdjB,EAAQkB,OAASlB,EAAQkB,MAAMb,OAASS,IAM7CpB,EAAEI,UAAUQ,OAAO,0CAEtBZ,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,EAASc,GACzD,GAAIZ,KAAKC,SAASH,GAChB,OAAO,EAGT,GAAgC,SAA5BN,EAAEM,GAASiB,KAAK,SACdjB,EAAQkB,OAASlB,EAAQkB,MAAMb,OACjC,IAAK,IAAIO,EAAI,EAAGA,EAAIZ,EAAQkB,MAAMb,OAAQO,IACxC,GAAIZ,EAAQkB,MAAMN,GAAGgK,KAAO9J,EAC1B,OAAO,EAMf,OAAO,GACNpB,EAAEI,UAAUQ,OAAO,8CAEtBZ,EAAEI,UAAUC,UAAU,eAAgB,SAAUH,EAAOI,EAASc,GAC9D,GAAIZ,KAAKC,SAASH,GAChB,OAAO,EAGT,GAAgC,SAA5BN,EAAEM,GAASiB,KAAK,SACdjB,EAAQkB,OAASlB,EAAQkB,MAAMb,OAGjC,IAFA,IAAIwK,EAAY,EAEPjK,EAAI,EAAGA,EAAIZ,EAAQkB,MAAMb,OAAQO,IAGxC,GAAgBE,GAFhB+J,GAAa7K,EAAQkB,MAAMN,GAAGgK,MAG5B,OAAO,EAMf,OAAO,GACNlL,EAAEI,UAAUQ,OAAO,uDACtBZ,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,GACjD,OAAOE,KAAKC,SAASH,IAAY,sFAAsFqB,KAAKzB,IAC3H,wCACHF,EAAEI,UAAUC,UAAU,WAAY,SAAU+K,EAAc9K,GACxD,IAAI+K,EAAiBD,EAAajL,QAAQ,eAAgB,IAC1D,OAAOK,KAAKC,SAASH,IAAoC,EAAxB+K,EAAe1K,QAAc,4BAA4BgB,KAAK0J,IAC9F,wCAUHrL,EAAEI,UAAUC,UAAU,WAAY,SAAU+K,EAAc9K,GAExD,OADA8K,EAAeA,EAAajL,QAAQ,eAAgB,IAC7CK,KAAKC,SAASH,IAAkC,EAAtB8K,EAAazK,QAAcyK,EAAa1K,MAAM,yEAC9E,wCACHV,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,GAChD,OAAOE,KAAKC,SAASH,IAAY,kLAAkLqB,KAAKzB,IACvN,iCAUHF,EAAEI,UAAUC,UAAU,QAAS,SAAUH,EAAOI,GAG9C,GAAIE,KAAKC,SAASH,GAChB,OAAO,EAGT,IAGIqC,EAHA2I,EAAW,IAAI7J,OAAO,wDAEtBiB,EAASxC,EAAM8C,OAAO9C,EAAMS,OAAS,GAAG0B,cAI5C,QAAmB,IAFnBnC,EAAQA,EAAM6C,WAAWV,eAEf1B,QAAeT,EAAMS,OAAS,IAAM2K,EAAS3J,KAAKzB,MAQ5DyC,EAA0B,KAD1BzC,EAAQA,EAAMC,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,KAAKA,QAAQ,OAAQ,MACzDQ,OAAeT,EAAM8C,OAAO,EAAG,GAAK9C,EAAM8C,OAAO,EAAG,GAblD,2BAcCM,OAAOnC,SAASwB,EAAQ,IAAM,MAAQD,IACvD,sCAKH1C,EAAEI,UAAUC,UAAU,QAAS,SAAUH,EAAOI,GAG9C,QAAIE,KAAKC,SAASH,OAIlBJ,EAAQA,EAAMmC,eAEH3B,MAAM,8EAKb,qBAAqBiB,KAAKzB,GACrB,0BAA0BoD,OAAOpD,EAAM8B,UAAU,EAAG,GAAK,MAAQ9B,EAAMoD,OAAO,KAInF,YAAY3B,KAAKzB,IACZA,EAAM,KAAO,0BAA0BoD,OAAOpD,EAAM8B,UAAU,EAAG,GAAK,MAI9E,sCAKHhC,EAAEI,UAAUC,UAAU,QAAS,SAAUH,GAKvC,GAAqB,MAFrBA,EAAQA,EAAMC,QAAQ,UAAW,KAEvBQ,OACR,OAAO,EAMT,IAHA,IAAI4K,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCC,EAAS,EAEJtK,EAAI,EAAGA,EAAI,EAAGA,IACrBsK,GAAUD,EAASrK,GAAKhB,EAAMgB,GAGhC,IAAIuK,EAAOD,EAAS,GAEpB,OAD4B,IAATC,EAAc,EAAIA,KACbtK,SAASjB,EAAM,GAAI,KAC1C,sCAYHF,EAAEI,UAAUC,UAAU,QAAS,SAAUH,GACvC,IAAIyC,EACAuB,EAEAwH,EACAC,EACAC,EAHA9J,EAAM,EAOV,GAAqB,MAFrB5B,EAAQA,EAAMC,QAAQ,8CAA+C,KAE3DQ,OACR,OAAO,EAQT,IAJAuD,EAAK/C,SAASjB,EAAM8B,UAAU,GAAI,IAAK,IAEvCW,EAASxB,SAASjB,EAAM8B,UAAU,EAAG,IAAK,IAErC2J,EAAQ,EAAGA,EAAQ,GAAIA,IAGZ,MAFdC,EAAaD,KAGXC,EAAa,GAGD,KAAVD,IACFC,EAAa,GAGf9J,GAAOa,EAAS,GAAKiJ,EACrBjJ,EAASxB,SAASwB,EAAS,GAAI,IAWjC,OAAIuB,KALFwH,EADO,GAFTA,EAAK5J,EAAM,IAGJ,GAAK4J,EAEL,IAQN,yCACH1L,EAAEI,UAAUC,UAAU,aAAc,SAAUH,EAAOI,EAASc,GAC5D,OAAOZ,KAAKC,SAASH,KAAaN,EAAEI,UAAU6B,QAAQ4J,QAAQ1J,KAAK3B,KAAMN,EAAOI,EAASc,IACxF,gEACHpB,EAAEI,UAAUC,UAAU,eAAgB,SAAUH,EAAOI,GACrD,OAAOE,KAAKC,SAASH,IAAY,SAASqB,KAAKzB,IAC9C,yBAeHF,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,EAASc,GACzD,QAAIZ,KAAKC,SAASH,KAIG,iBAAVc,IACTA,EAAQ,IAAIK,OAAO,OAASL,EAAQ,OAG/BA,EAAMO,KAAKzB,KACjB,mBAKHF,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,GAChD,OAAOE,KAAKC,SAASH,IAAY,0FAA0FqB,KAAKzB,IAC/H,wCAoBHF,EAAEI,UAAUC,UAAU,UAAW,SAAU+K,EAAc9K,GACvD8K,EAAeA,EAAajL,QAAQ,OAAQ,IAE5C,OAAOK,KAAKC,SAASH,IADR,kHAC2BqB,KAAKyJ,IAC5C,uCAWHpL,EAAEI,UAAUC,UAAU,WAAY,SAAU+K,EAAc9K,GAExD,OADA8K,EAAeA,EAAajL,QAAQ,eAAgB,IAC7CK,KAAKC,SAASH,IAAkC,EAAtB8K,EAAazK,QAAcyK,EAAa1K,MAAM,qFAC9E,0CAUHV,EAAEI,UAAUC,UAAU,UAAW,SAAU+K,EAAc9K,GAEvD,OADA8K,EAAeA,EAAajL,QAAQ,eAAgB,IAC7CK,KAAKC,SAASH,IAAkC,EAAtB8K,EAAazK,QAAcyK,EAAa1K,MAAM,sJAC9E,uCAkBHV,EAAEI,UAAUC,UAAU,UAAW,SAAU+K,EAAc9K,GAEvD,OADA8K,EAAeA,EAAajL,QAAQ,OAAQ,IACrCK,KAAKC,SAASH,IAAkC,EAAtB8K,EAAazK,QAAcyK,EAAa1K,MAAM,wFAC9E,uCAUHV,EAAEI,UAAUC,UAAU,eAAgB,SAAUyL,EAAWxL,GACzD,OAAOE,KAAKC,SAASH,IAAY,uCAAuCqB,KAAKmK,IAC5E,0BAeH9L,EAAEI,UAAUC,UAAU,eAAgB,SAAUH,EAAOI,GACrD,OAAOE,KAAKC,SAASH,IAAY,8EAA8EqB,KAAKzB,IACnH,sCAGHF,EAAEI,UAAUC,UAAU,eAAgB,SAAUH,EAAOI,GACrD,OAAOE,KAAKC,SAASH,IAAY,UAAUqB,KAAKzB,IAC/C,sCACHF,EAAEI,UAAUC,UAAU,eAAgB,SAAUH,EAAOI,GACrD,OAAOE,KAAKC,SAASH,IAAY,gCAAgCqB,KAAKzB,IACrE,sCAEHF,EAAEI,UAAUC,UAAU,aAAc,SAAUH,EAAOI,GACnD,OAAOE,KAAKC,SAASH,IAAY,iOAAiOqB,KAAKzB,IACtQ,sCAkBHF,EAAEI,UAAUC,UAAU,qBAAsB,SAAUH,EAAOI,EAASyL,GACpE,IAAIC,EAAUhM,EAAE+L,EAAQ,GAAIzL,EAAQ2L,MAChCC,EAAeF,EAAQG,GAAG,GAC1B/L,EAAY8L,EAAaE,KAAK,iBAAmBF,EAAaE,KAAK,iBAAmBpM,EAAEqM,OAAO,GAAI7L,MACnG8L,EAAUN,EAAQO,OAAO,WAC3B,OAAOnM,EAAUoM,aAAahM,QAC7BG,QAAUoL,EAAQ,GAYrB,OAVAG,EAAaE,KAAK,gBAAiBhM,GAE9BJ,EAAEM,GAAS8L,KAAK,qBACnBJ,EAAQI,KAAK,mBAAmB,GAChCJ,EAAQS,KAAK,WACXrM,EAAUE,QAAQE,QAEpBwL,EAAQI,KAAK,mBAAmB,IAG3BE,GACNtM,EAAEI,UAAUQ,OAAO,8CAuBtBZ,EAAEI,UAAUC,UAAU,uBAAwB,SAAUH,EAAOI,EAASyL,GACtE,IAAIC,EAAUhM,EAAE+L,EAAQ,GAAIzL,EAAQ2L,MAChCC,EAAeF,EAAQG,GAAG,GAC1B/L,EAAY8L,EAAaE,KAAK,cAAgBF,EAAaE,KAAK,cAAgBpM,EAAEqM,OAAO,GAAI7L,MAC7FkM,EAAeV,EAAQO,OAAO,WAChC,OAAOnM,EAAUoM,aAAahM,QAC7BG,OACC2L,EAA2B,IAAjBI,GAAsBA,GAAgBX,EAAQ,GAY5D,OAVAG,EAAaE,KAAK,aAAchM,GAE3BJ,EAAEM,GAAS8L,KAAK,qBACnBJ,EAAQI,KAAK,mBAAmB,GAChCJ,EAAQS,KAAK,WACXrM,EAAUE,QAAQE,QAEpBwL,EAAQI,KAAK,mBAAmB,IAG3BE,GACNtM,EAAEI,UAAUQ,OAAO,kEAoCtBZ,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,EAASyL,GACzD,IAIIjL,EAJA6L,OAA+B,IAAZZ,EACnBa,GAAgBD,QAA8C,IAA1BZ,EAAQa,eAAwCb,EAAQa,cAC5FC,GAAqBF,QAAmD,IAA/BZ,EAAQc,oBAA6Cd,EAAQc,mBACtGC,GAAkBH,QAAgD,IAA5BZ,EAAQe,iBAA0Cf,EAAQe,gBAcpG,OAREhM,EAHG+L,GAAuBC,EAEjBD,GAAsBC,EACvB,mIACCD,EACD,gIAEA,0HANA,uHASV/L,EAAQ8L,EAAgB,IAAInL,OAAOX,GAAS,IAAIW,OAAOX,EAAO,KACvDN,KAAKC,SAASH,IAAYQ,EAAMa,KAAKzB,IAC3C,gCAEHF,EAAEI,UAAUC,UAAU,oBAAqB,SAAUH,EAAOI,EAASc,GACnE,OAAOpB,EAAEE,GAAO6M,OAAOpM,QAAUS,GAChCpB,EAAEI,UAAUQ,OAAO,yCACtBZ,EAAEI,UAAUC,UAAU,OAAQ,SAAUH,EAAOI,GAC7C,OAAOE,KAAKC,SAASH,IAAY,yCAAyCqB,KAAKzB,IAC9E,sDACHF,EAAEI,UAAUC,UAAU,UAAW,SAAUH,EAAOI,GAChD,OAAOE,KAAKC,SAASH,IAAY,iDAAiDqB,KAAKzB,IACtF,qDAEHF,EAAEI,UAAUC,UAAU,OAAQ,SAAUH,EAAOI,GAC7C,OAAOE,KAAKC,SAASH,IAAY,qqCAAqqCqB,KAAKzB,IAC1sCF,EAAEI,UAAUiF,SAAS2H,KAcxBhN,EAAEI,UAAUC,UAAU,QAAS,SAAU4M,GACvC,GAAiB,KAAbA,EAAEtM,OACJ,OAAO,EAGT,IAIIO,EACAoB,EACA4K,EACAC,EACAC,EACAC,EATAC,EAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACpHC,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACxEC,EAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvDC,EAAK,EAQT,IAAKvM,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAQvB,GAPAiM,EAAIK,EAAGtM,GACPgM,EAAID,EAAES,MAAMxM,EAAGA,EAAI,GAET,IAANA,IACFmM,EAAMH,GAGHS,MAAMT,IAGT,IAAK5K,EAAI,EAAGA,EAAIgL,EAAG3M,OAAQ2B,IACzB,GAAI4K,EAAE7K,gBAAkBiL,EAAGhL,GAAI,CAC7B4K,EAAIK,EAAGjL,GACP4K,GAAKC,EAEDQ,MAAMN,IAAc,IAAN/K,IAChB+K,EAAMC,EAAGhL,IAGX,YAXJ4K,GAAKC,EAgBPM,GAAMP,EASR,OAJW,MAFXE,EAAKK,EAAK,MAGRL,EAAK,KAGHA,IAAOC,GAKV,iEACHrN,EAAEI,UAAUC,UAAU,YAAa,SAAUH,EAAOI,GAClD,OAAOE,KAAKC,SAASH,IAAY,mBAAmBqB,KAAKzB,IACxD,wCACHF,EAAEI,UAAUC,UAAU,WAAY,SAAUH,EAAOI,GACjD,OAAOE,KAAKC,SAASH,IAAY,yBAAyBqB,KAAKzB,IAC9D,+DACIF","file":"additional-methods-ae7f5683fa.js","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * jQuery Validation Plugin v1.19.1\n *\n * https://jqueryvalidation.org/\n *\n * Copyright (c) 2019 Jörn Zaefferer\n * Released under the MIT license\n */\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"jquery\", \"./jquery.validate\"], factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && module.exports) {\n    module.exports = factory(require(\"jquery\"));\n  } else {\n    factory(jQuery);\n  }\n})(function ($) {\n  (function () {\n    function stripHtml(value) {\n      // Remove html tags and space chars\n      return value.replace(/<.[^<>]*?>/g, \" \").replace(/&nbsp;|&#160;/gi, \" \") // Remove punctuation\n      .replace(/[.(),;:!?%#$'\\\"_+=\\/\\-“”’]*/g, \"\");\n    }\n\n    $.validator.addMethod(\"maxWords\", function (value, element, params) {\n      return this.optional(element) || stripHtml(value).match(/\\b\\w+\\b/g).length <= params;\n    }, $.validator.format(\"Please enter {0} words or less.\"));\n    $.validator.addMethod(\"minWords\", function (value, element, params) {\n      return this.optional(element) || stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\n    }, $.validator.format(\"Please enter at least {0} words.\"));\n    $.validator.addMethod(\"rangeWords\", function (value, element, params) {\n      var valueStripped = stripHtml(value),\n          regex = /\\b\\w+\\b/g;\n      return this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];\n    }, $.validator.format(\"Please enter between {0} and {1} words.\"));\n  })();\n  /**\n   * This is used in the United States to process payments, deposits,\n   * or transfers using the Automated Clearing House (ACH) or Fedwire\n   * systems. A very common use case would be to validate a form for\n   * an ACH bill payment.\n   */\n\n\n  $.validator.addMethod(\"abaRoutingNumber\", function (value) {\n    var checksum = 0;\n    var tokens = value.split(\"\");\n    var length = tokens.length; // Length Check\n\n    if (length !== 9) {\n      return false;\n    } // Calc the checksum\n    // https://en.wikipedia.org/wiki/ABA_routing_transit_number\n\n\n    for (var i = 0; i < length; i += 3) {\n      checksum += parseInt(tokens[i], 10) * 3 + parseInt(tokens[i + 1], 10) * 7 + parseInt(tokens[i + 2], 10);\n    } // If not zero and divisible by 10 then valid\n\n\n    if (checksum !== 0 && checksum % 10 === 0) {\n      return true;\n    }\n\n    return false;\n  }, \"Please enter a valid routing number.\"); // Accept a value from a file input based on a required mimetype\n\n  $.validator.addMethod(\"accept\", function (value, element, param) {\n    // Split mime on commas in case we have multiple types we can accept\n    var typeParam = typeof param === \"string\" ? param.replace(/\\s/g, \"\") : \"image/*\",\n        optionalValue = this.optional(element),\n        i,\n        file,\n        regex; // Element is optional\n\n    if (optionalValue) {\n      return optionalValue;\n    }\n\n    if ($(element).attr(\"type\") === \"file\") {\n      // Escape string to be used in the regex\n      // see: https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\n      // Escape also \"/*\" as \"/.*\" as a wildcard\n      typeParam = typeParam.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\").replace(/,/g, \"|\").replace(/\\/\\*/g, \"/.*\"); // Check if the element has a FileList before checking each file\n\n      if (element.files && element.files.length) {\n        regex = new RegExp(\".?(\" + typeParam + \")$\", \"i\");\n\n        for (i = 0; i < element.files.length; i++) {\n          file = element.files[i]; // Grab the mimetype from the loaded file, verify it matches\n\n          if (!file.type.match(regex)) {\n            return false;\n          }\n        }\n      }\n    } // Either return true because we've validated each file, or because the\n    // browser does not support element.files and the FileList feature\n\n\n    return true;\n  }, $.validator.format(\"Please enter a value with a valid mimetype.\"));\n  $.validator.addMethod(\"alphanumeric\", function (value, element) {\n    return this.optional(element) || /^\\w+$/i.test(value);\n  }, \"Letters, numbers, and underscores only please\");\n  /*\n   * Dutch bank account numbers (not 'giro' numbers) have 9 digits\n   * and pass the '11 check'.\n   * We accept the notation with spaces, as that is common.\n   * acceptable: 123456789 or 12 34 56 789\n   */\n\n  $.validator.addMethod(\"bankaccountNL\", function (value, element) {\n    if (this.optional(element)) {\n      return true;\n    }\n\n    if (!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(value)) {\n      return false;\n    } // Now '11 check'\n\n\n    var account = value.replace(/ /g, \"\"),\n        // Remove spaces\n    sum = 0,\n        len = account.length,\n        pos,\n        factor,\n        digit;\n\n    for (pos = 0; pos < len; pos++) {\n      factor = len - pos;\n      digit = account.substring(pos, pos + 1);\n      sum = sum + factor * digit;\n    }\n\n    return sum % 11 === 0;\n  }, \"Please specify a valid bank account number\");\n  $.validator.addMethod(\"bankorgiroaccountNL\", function (value, element) {\n    return this.optional(element) || $.validator.methods.bankaccountNL.call(this, value, element) || $.validator.methods.giroaccountNL.call(this, value, element);\n  }, \"Please specify a valid bank or giro account number\");\n  /**\n   * BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.\n   *\n   * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)\n   *\n   * Validation is case-insensitive. Please make sure to normalize input yourself.\n   *\n   * BIC definition in detail:\n   * - First 4 characters - bank code (only letters)\n   * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)\n   * - Next 2 characters - location code (letters and digits)\n   *   a. shall not start with '0' or '1'\n   *   b. second character must be a letter ('O' is not allowed) or digit ('0' for test (therefore not allowed), '1' denoting passive participant, '2' typically reverse-billing)\n   * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)\n   */\n\n  $.validator.addMethod(\"bic\", function (value, element) {\n    return this.optional(element) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(value.toUpperCase());\n  }, \"Please specify a valid BIC code\");\n  /*\n   * Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities\n   * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal\n   *\n   * Spanish CIF structure:\n   *\n   * [ T ][ P ][ P ][ N ][ N ][ N ][ N ][ N ][ C ]\n   *\n   * Where:\n   *\n   * T: 1 character. Kind of Organization Letter: [ABCDEFGHJKLMNPQRSUVW]\n   * P: 2 characters. Province.\n   * N: 5 characters. Secuencial Number within the province.\n   * C: 1 character. Control Digit: [0-9A-J].\n   *\n   * [ T ]: Kind of Organizations. Possible values:\n   *\n   *   A. Corporations\n   *   B. LLCs\n   *   C. General partnerships\n   *   D. Companies limited partnerships\n   *   E. Communities of goods\n   *   F. Cooperative Societies\n   *   G. Associations\n   *   H. Communities of homeowners in horizontal property regime\n   *   J. Civil Societies\n   *   K. Old format\n   *   L. Old format\n   *   M. Old format\n   *   N. Nonresident entities\n   *   P. Local authorities\n   *   Q. Autonomous bodies, state or not, and the like, and congregations and religious institutions\n   *   R. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)\n   *   S. Organs of State Administration and regions\n   *   V. Agrarian Transformation\n   *   W. Permanent establishments of non-resident in Spain\n   *\n   * [ C ]: Control Digit. It can be a number or a letter depending on T value:\n   * [ T ]  -->  [ C ]\n   * ------    ----------\n   *   A         Number\n   *   B         Number\n   *   E         Number\n   *   H         Number\n   *   K         Letter\n   *   P         Letter\n   *   Q         Letter\n   *   S         Letter\n   *\n   */\n\n  $.validator.addMethod(\"cifES\", function (value, element) {\n    \"use strict\";\n\n    if (this.optional(element)) {\n      return true;\n    }\n\n    var cifRegEx = new RegExp(/^([ABCDEFGHJKLMNPQRSUVW])(\\d{7})([0-9A-J])$/gi);\n    var letter = value.substring(0, 1),\n        // [ T ]\n    number = value.substring(1, 8),\n        // [ P ][ P ][ N ][ N ][ N ][ N ][ N ]\n    control = value.substring(8, 9),\n        // [ C ]\n    all_sum = 0,\n        even_sum = 0,\n        odd_sum = 0,\n        i,\n        n,\n        control_digit,\n        control_letter;\n\n    function isOdd(n) {\n      return n % 2 === 0;\n    } // Quick format test\n\n\n    if (value.length !== 9 || !cifRegEx.test(value)) {\n      return false;\n    }\n\n    for (i = 0; i < number.length; i++) {\n      n = parseInt(number[i], 10); // Odd positions\n\n      if (isOdd(i)) {\n        // Odd positions are multiplied first.\n        n *= 2; // If the multiplication is bigger than 10 we need to adjust\n\n        odd_sum += n < 10 ? n : n - 9; // Even positions\n        // Just sum them\n      } else {\n        even_sum += n;\n      }\n    }\n\n    all_sum = even_sum + odd_sum;\n    control_digit = (10 - all_sum.toString().substr(-1)).toString();\n    control_digit = parseInt(control_digit, 10) > 9 ? \"0\" : control_digit;\n    control_letter = \"JABCDEFGHI\".substr(control_digit, 1).toString(); // Control must be a digit\n\n    if (letter.match(/[ABEH]/)) {\n      return control === control_digit; // Control must be a letter\n    } else if (letter.match(/[KPQS]/)) {\n      return control === control_letter;\n    } // Can be either\n\n\n    return control === control_digit || control === control_letter;\n  }, \"Please specify a valid CIF number.\");\n  /*\n   * Brazillian CNH number (Carteira Nacional de Habilitacao) is the License Driver number.\n   * CNH numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.\n   */\n\n  $.validator.addMethod(\"cnhBR\", function (value) {\n    // Removing special characters from value\n    value = value.replace(/([~!@#$%^&*()_+=`{}\\[\\]\\-|\\\\:;'<>,.\\/? ])+/g, \"\"); // Checking value to have 11 digits only\n\n    if (value.length !== 11) {\n      return false;\n    }\n\n    var sum = 0,\n        dsc = 0,\n        firstChar,\n        firstCN,\n        secondCN,\n        i,\n        j,\n        v;\n    firstChar = value.charAt(0);\n\n    if (new Array(12).join(firstChar) === value) {\n      return false;\n    } // Step 1 - using first Check Number:\n\n\n    for (i = 0, j = 9, v = 0; i < 9; ++i, --j) {\n      sum += +(value.charAt(i) * j);\n    }\n\n    firstCN = sum % 11;\n\n    if (firstCN >= 10) {\n      firstCN = 0;\n      dsc = 2;\n    }\n\n    sum = 0;\n\n    for (i = 0, j = 1, v = 0; i < 9; ++i, ++j) {\n      sum += +(value.charAt(i) * j);\n    }\n\n    secondCN = sum % 11;\n\n    if (secondCN >= 10) {\n      secondCN = 0;\n    } else {\n      secondCN = secondCN - dsc;\n    }\n\n    return String(firstCN).concat(secondCN) === value.substr(-2);\n  }, \"Please specify a valid CNH number\");\n  /*\n   * Brazillian value number (Cadastrado de Pessoas Juridica).\n   * value numbers have 14 digits in total: 12 numbers followed by 2 check numbers that are being used for validation.\n   */\n\n  $.validator.addMethod(\"cnpjBR\", function (value, element) {\n    \"use strict\";\n\n    if (this.optional(element)) {\n      return true;\n    } // Removing no number\n\n\n    value = value.replace(/[^\\d]+/g, \"\"); // Checking value to have 14 digits only\n\n    if (value.length !== 14) {\n      return false;\n    } // Elimina values invalidos conhecidos\n\n\n    if (value === \"00000000000000\" || value === \"11111111111111\" || value === \"22222222222222\" || value === \"33333333333333\" || value === \"44444444444444\" || value === \"55555555555555\" || value === \"66666666666666\" || value === \"77777777777777\" || value === \"88888888888888\" || value === \"99999999999999\") {\n      return false;\n    } // Valida DVs\n\n\n    var tamanho = value.length - 2;\n    var numeros = value.substring(0, tamanho);\n    var digitos = value.substring(tamanho);\n    var soma = 0;\n    var pos = tamanho - 7;\n\n    for (var i = tamanho; i >= 1; i--) {\n      soma += numeros.charAt(tamanho - i) * pos--;\n\n      if (pos < 2) {\n        pos = 9;\n      }\n    }\n\n    var resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n\n    if (resultado !== parseInt(digitos.charAt(0), 10)) {\n      return false;\n    }\n\n    tamanho = tamanho + 1;\n    numeros = value.substring(0, tamanho);\n    soma = 0;\n    pos = tamanho - 7;\n\n    for (var il = tamanho; il >= 1; il--) {\n      soma += numeros.charAt(tamanho - il) * pos--;\n\n      if (pos < 2) {\n        pos = 9;\n      }\n    }\n\n    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n\n    if (resultado !== parseInt(digitos.charAt(1), 10)) {\n      return false;\n    }\n\n    return true;\n  }, \"Please specify a CNPJ value number\");\n  /*\n   * Brazillian CPF number (Cadastrado de Pessoas Físicas) is the equivalent of a Brazilian tax registration number.\n   * CPF numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.\n   */\n\n  $.validator.addMethod(\"cpfBR\", function (value, element) {\n    \"use strict\";\n\n    if (this.optional(element)) {\n      return true;\n    } // Removing special characters from value\n\n\n    value = value.replace(/([~!@#$%^&*()_+=`{}\\[\\]\\-|\\\\:;'<>,.\\/? ])+/g, \"\"); // Checking value to have 11 digits only\n\n    if (value.length !== 11) {\n      return false;\n    }\n\n    var sum = 0,\n        firstCN,\n        secondCN,\n        checkResult,\n        i;\n    firstCN = parseInt(value.substring(9, 10), 10);\n    secondCN = parseInt(value.substring(10, 11), 10);\n\n    checkResult = function checkResult(sum, cn) {\n      var result = sum * 10 % 11;\n\n      if (result === 10 || result === 11) {\n        result = 0;\n      }\n\n      return result === cn;\n    }; // Checking for dump data\n\n\n    if (value === \"\" || value === \"00000000000\" || value === \"11111111111\" || value === \"22222222222\" || value === \"33333333333\" || value === \"44444444444\" || value === \"55555555555\" || value === \"66666666666\" || value === \"77777777777\" || value === \"88888888888\" || value === \"99999999999\") {\n      return false;\n    } // Step 1 - using first Check Number:\n\n\n    for (i = 1; i <= 9; i++) {\n      sum = sum + parseInt(value.substring(i - 1, i), 10) * (11 - i);\n    } // If first Check Number (CN) is valid, move to Step 2 - using second Check Number:\n\n\n    if (checkResult(sum, firstCN)) {\n      sum = 0;\n\n      for (i = 1; i <= 10; i++) {\n        sum = sum + parseInt(value.substring(i - 1, i), 10) * (12 - i);\n      }\n\n      return checkResult(sum, secondCN);\n    }\n\n    return false;\n  }, \"Please specify a valid CPF number\"); // https://jqueryvalidation.org/creditcard-method/\n  // based on https://en.wikipedia.org/wiki/Luhn_algorithm\n\n  $.validator.addMethod(\"creditcard\", function (value, element) {\n    if (this.optional(element)) {\n      return \"dependency-mismatch\";\n    } // Accept only spaces, digits and dashes\n\n\n    if (/[^0-9 \\-]+/.test(value)) {\n      return false;\n    }\n\n    var nCheck = 0,\n        nDigit = 0,\n        bEven = false,\n        n,\n        cDigit;\n    value = value.replace(/\\D/g, \"\"); // Basing min and max length on\n    // https://dev.ean.com/general-info/valid-card-types/\n\n    if (value.length < 13 || value.length > 19) {\n      return false;\n    }\n\n    for (n = value.length - 1; n >= 0; n--) {\n      cDigit = value.charAt(n);\n      nDigit = parseInt(cDigit, 10);\n\n      if (bEven) {\n        if ((nDigit *= 2) > 9) {\n          nDigit -= 9;\n        }\n      }\n\n      nCheck += nDigit;\n      bEven = !bEven;\n    }\n\n    return nCheck % 10 === 0;\n  }, \"Please enter a valid credit card number.\");\n  /* NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator\n   * Redistributed under the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0\n   * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)\n   */\n\n  $.validator.addMethod(\"creditcardtypes\", function (value, element, param) {\n    if (/[^0-9\\-]+/.test(value)) {\n      return false;\n    }\n\n    value = value.replace(/\\D/g, \"\");\n    var validTypes = 0x0000;\n\n    if (param.mastercard) {\n      validTypes |= 0x0001;\n    }\n\n    if (param.visa) {\n      validTypes |= 0x0002;\n    }\n\n    if (param.amex) {\n      validTypes |= 0x0004;\n    }\n\n    if (param.dinersclub) {\n      validTypes |= 0x0008;\n    }\n\n    if (param.enroute) {\n      validTypes |= 0x0010;\n    }\n\n    if (param.discover) {\n      validTypes |= 0x0020;\n    }\n\n    if (param.jcb) {\n      validTypes |= 0x0040;\n    }\n\n    if (param.unknown) {\n      validTypes |= 0x0080;\n    }\n\n    if (param.all) {\n      validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\n    }\n\n    if (validTypes & 0x0001 && (/^(5[12345])/.test(value) || /^(2[234567])/.test(value))) {\n      // Mastercard\n      return value.length === 16;\n    }\n\n    if (validTypes & 0x0002 && /^(4)/.test(value)) {\n      // Visa\n      return value.length === 16;\n    }\n\n    if (validTypes & 0x0004 && /^(3[47])/.test(value)) {\n      // Amex\n      return value.length === 15;\n    }\n\n    if (validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test(value)) {\n      // Dinersclub\n      return value.length === 14;\n    }\n\n    if (validTypes & 0x0010 && /^(2(014|149))/.test(value)) {\n      // Enroute\n      return value.length === 15;\n    }\n\n    if (validTypes & 0x0020 && /^(6011)/.test(value)) {\n      // Discover\n      return value.length === 16;\n    }\n\n    if (validTypes & 0x0040 && /^(3)/.test(value)) {\n      // Jcb\n      return value.length === 16;\n    }\n\n    if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) {\n      // Jcb\n      return value.length === 15;\n    }\n\n    if (validTypes & 0x0080) {\n      // Unknown\n      return true;\n    }\n\n    return false;\n  }, \"Please enter a valid credit card number.\");\n  /**\n   * Validates currencies with any given symbols by @jameslouiz\n   * Symbols can be optional or required. Symbols required by default\n   *\n   * Usage examples:\n   *  currency: [\"£\", false] - Use false for soft currency validation\n   *  currency: [\"$\", false]\n   *  currency: [\"RM\", false] - also works with text based symbols such as \"RM\" - Malaysia Ringgit etc\n   *\n   *  <input class=\"currencyInput\" name=\"currencyInput\">\n   *\n   * Soft symbol checking\n   *  currencyInput: {\n   *     currency: [\"$\", false]\n   *  }\n   *\n   * Strict symbol checking (default)\n   *  currencyInput: {\n   *     currency: \"$\"\n   *     //OR\n   *     currency: [\"$\", true]\n   *  }\n   *\n   * Multiple Symbols\n   *  currencyInput: {\n   *     currency: \"$,£,¢\"\n   *  }\n   */\n\n  $.validator.addMethod(\"currency\", function (value, element, param) {\n    var isParamString = typeof param === \"string\",\n        symbol = isParamString ? param : param[0],\n        soft = isParamString ? true : param[1],\n        regex;\n    symbol = symbol.replace(/,/g, \"\");\n    symbol = soft ? symbol + \"]\" : symbol + \"]?\";\n    regex = \"^[\" + symbol + \"([1-9]{1}[0-9]{0,2}(\\\\,[0-9]{3})*(\\\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\\\.[0-9]{0,2})?|0(\\\\.[0-9]{0,2})?|(\\\\.[0-9]{1,2})?)$\";\n    regex = new RegExp(regex);\n    return this.optional(element) || regex.test(value);\n  }, \"Please specify a valid currency\");\n  $.validator.addMethod(\"dateFA\", function (value, element) {\n    return this.optional(element) || /^[1-4]\\d{3}\\/((0?[1-6]\\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(value);\n  }, $.validator.messages.date);\n  /**\n   * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.\n   *\n   * @example $.validator.methods.date(\"01/01/1900\")\n   * @result true\n   *\n   * @example $.validator.methods.date(\"01/13/1990\")\n   * @result false\n   *\n   * @example $.validator.methods.date(\"01.01.1900\")\n   * @result false\n   *\n   * @example <input name=\"pippo\" class=\"{dateITA:true}\" />\n   * @desc Declares an optional input element whose value must be a valid date.\n   *\n   * @name $.validator.methods.dateITA\n   * @type Boolean\n   * @cat Plugins/Validate/Methods\n   */\n\n  $.validator.addMethod(\"dateITA\", function (value, element) {\n    var check = false,\n        re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\n        adata,\n        gg,\n        mm,\n        aaaa,\n        xdata;\n\n    if (re.test(value)) {\n      adata = value.split(\"/\");\n      gg = parseInt(adata[0], 10);\n      mm = parseInt(adata[1], 10);\n      aaaa = parseInt(adata[2], 10);\n      xdata = new Date(Date.UTC(aaaa, mm - 1, gg, 12, 0, 0, 0));\n\n      if (xdata.getUTCFullYear() === aaaa && xdata.getUTCMonth() === mm - 1 && xdata.getUTCDate() === gg) {\n        check = true;\n      } else {\n        check = false;\n      }\n    } else {\n      check = false;\n    }\n\n    return this.optional(element) || check;\n  }, $.validator.messages.date);\n  $.validator.addMethod(\"dateNL\", function (value, element) {\n    return this.optional(element) || /^(0?[1-9]|[12]\\d|3[01])[\\.\\/\\-](0?[1-9]|1[012])[\\.\\/\\-]([12]\\d)?(\\d\\d)$/.test(value);\n  }, $.validator.messages.date); // Older \"accept\" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept\n\n  $.validator.addMethod(\"extension\", function (value, element, param) {\n    param = typeof param === \"string\" ? param.replace(/,/g, \"|\") : \"png|jpe?g|gif\";\n    return this.optional(element) || value.match(new RegExp(\"\\\\.(\" + param + \")$\", \"i\"));\n  }, $.validator.format(\"Please enter a value with a valid extension.\"));\n  /**\n   * Dutch giro account numbers (not bank numbers) have max 7 digits\n   */\n\n  $.validator.addMethod(\"giroaccountNL\", function (value, element) {\n    return this.optional(element) || /^[0-9]{1,7}$/.test(value);\n  }, \"Please specify a valid giro account number\");\n  $.validator.addMethod(\"greaterThan\", function (value, element, param) {\n    var target = $(param);\n\n    if (this.settings.onfocusout && target.not(\".validate-greaterThan-blur\").length) {\n      target.addClass(\"validate-greaterThan-blur\").on(\"blur.validate-greaterThan\", function () {\n        $(element).valid();\n      });\n    }\n\n    return value > target.val();\n  }, \"Please enter a greater value.\");\n  $.validator.addMethod(\"greaterThanEqual\", function (value, element, param) {\n    var target = $(param);\n\n    if (this.settings.onfocusout && target.not(\".validate-greaterThanEqual-blur\").length) {\n      target.addClass(\"validate-greaterThanEqual-blur\").on(\"blur.validate-greaterThanEqual\", function () {\n        $(element).valid();\n      });\n    }\n\n    return value >= target.val();\n  }, \"Please enter a greater value.\");\n  /**\n   * IBAN is the international bank account number.\n   * It has a country - specific format, that is checked here too\n   *\n   * Validation is case-insensitive. Please make sure to normalize input yourself.\n   */\n\n  $.validator.addMethod(\"iban\", function (value, element) {\n    // Some quick simple tests to prevent needless work\n    if (this.optional(element)) {\n      return true;\n    } // Remove spaces and to upper case\n\n\n    var iban = value.replace(/ /g, \"\").toUpperCase(),\n        ibancheckdigits = \"\",\n        leadingZeroes = true,\n        cRest = \"\",\n        cOperator = \"\",\n        countrycode,\n        ibancheck,\n        charAt,\n        cChar,\n        bbanpattern,\n        bbancountrypatterns,\n        ibanregexp,\n        i,\n        p; // Check for IBAN code length.\n    // It contains:\n    // country code ISO 3166-1 - two letters,\n    // two check digits,\n    // Basic Bank Account Number (BBAN) - up to 30 chars\n\n    var minimalIBANlength = 5;\n\n    if (iban.length < minimalIBANlength) {\n      return false;\n    } // Check the country code and find the country specific format\n\n\n    countrycode = iban.substring(0, 2);\n    bbancountrypatterns = {\n      \"AL\": \"\\\\d{8}[\\\\dA-Z]{16}\",\n      \"AD\": \"\\\\d{8}[\\\\dA-Z]{12}\",\n      \"AT\": \"\\\\d{16}\",\n      \"AZ\": \"[\\\\dA-Z]{4}\\\\d{20}\",\n      \"BE\": \"\\\\d{12}\",\n      \"BH\": \"[A-Z]{4}[\\\\dA-Z]{14}\",\n      \"BA\": \"\\\\d{16}\",\n      \"BR\": \"\\\\d{23}[A-Z][\\\\dA-Z]\",\n      \"BG\": \"[A-Z]{4}\\\\d{6}[\\\\dA-Z]{8}\",\n      \"CR\": \"\\\\d{17}\",\n      \"HR\": \"\\\\d{17}\",\n      \"CY\": \"\\\\d{8}[\\\\dA-Z]{16}\",\n      \"CZ\": \"\\\\d{20}\",\n      \"DK\": \"\\\\d{14}\",\n      \"DO\": \"[A-Z]{4}\\\\d{20}\",\n      \"EE\": \"\\\\d{16}\",\n      \"FO\": \"\\\\d{14}\",\n      \"FI\": \"\\\\d{14}\",\n      \"FR\": \"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\",\n      \"GE\": \"[\\\\dA-Z]{2}\\\\d{16}\",\n      \"DE\": \"\\\\d{18}\",\n      \"GI\": \"[A-Z]{4}[\\\\dA-Z]{15}\",\n      \"GR\": \"\\\\d{7}[\\\\dA-Z]{16}\",\n      \"GL\": \"\\\\d{14}\",\n      \"GT\": \"[\\\\dA-Z]{4}[\\\\dA-Z]{20}\",\n      \"HU\": \"\\\\d{24}\",\n      \"IS\": \"\\\\d{22}\",\n      \"IE\": \"[\\\\dA-Z]{4}\\\\d{14}\",\n      \"IL\": \"\\\\d{19}\",\n      \"IT\": \"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\",\n      \"KZ\": \"\\\\d{3}[\\\\dA-Z]{13}\",\n      \"KW\": \"[A-Z]{4}[\\\\dA-Z]{22}\",\n      \"LV\": \"[A-Z]{4}[\\\\dA-Z]{13}\",\n      \"LB\": \"\\\\d{4}[\\\\dA-Z]{20}\",\n      \"LI\": \"\\\\d{5}[\\\\dA-Z]{12}\",\n      \"LT\": \"\\\\d{16}\",\n      \"LU\": \"\\\\d{3}[\\\\dA-Z]{13}\",\n      \"MK\": \"\\\\d{3}[\\\\dA-Z]{10}\\\\d{2}\",\n      \"MT\": \"[A-Z]{4}\\\\d{5}[\\\\dA-Z]{18}\",\n      \"MR\": \"\\\\d{23}\",\n      \"MU\": \"[A-Z]{4}\\\\d{19}[A-Z]{3}\",\n      \"MC\": \"\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}\",\n      \"MD\": \"[\\\\dA-Z]{2}\\\\d{18}\",\n      \"ME\": \"\\\\d{18}\",\n      \"NL\": \"[A-Z]{4}\\\\d{10}\",\n      \"NO\": \"\\\\d{11}\",\n      \"PK\": \"[\\\\dA-Z]{4}\\\\d{16}\",\n      \"PS\": \"[\\\\dA-Z]{4}\\\\d{21}\",\n      \"PL\": \"\\\\d{24}\",\n      \"PT\": \"\\\\d{21}\",\n      \"RO\": \"[A-Z]{4}[\\\\dA-Z]{16}\",\n      \"SM\": \"[A-Z]\\\\d{10}[\\\\dA-Z]{12}\",\n      \"SA\": \"\\\\d{2}[\\\\dA-Z]{18}\",\n      \"RS\": \"\\\\d{18}\",\n      \"SK\": \"\\\\d{20}\",\n      \"SI\": \"\\\\d{15}\",\n      \"ES\": \"\\\\d{20}\",\n      \"SE\": \"\\\\d{20}\",\n      \"CH\": \"\\\\d{5}[\\\\dA-Z]{12}\",\n      \"TN\": \"\\\\d{20}\",\n      \"TR\": \"\\\\d{5}[\\\\dA-Z]{17}\",\n      \"AE\": \"\\\\d{3}\\\\d{16}\",\n      \"GB\": \"[A-Z]{4}\\\\d{14}\",\n      \"VG\": \"[\\\\dA-Z]{4}\\\\d{16}\"\n    };\n    bbanpattern = bbancountrypatterns[countrycode]; // As new countries will start using IBAN in the\n    // future, we only check if the countrycode is known.\n    // This prevents false negatives, while almost all\n    // false positives introduced by this, will be caught\n    // by the checksum validation below anyway.\n    // Strict checking should return FALSE for unknown\n    // countries.\n\n    if (typeof bbanpattern !== \"undefined\") {\n      ibanregexp = new RegExp(\"^[A-Z]{2}\\\\d{2}\" + bbanpattern + \"$\", \"\");\n\n      if (!ibanregexp.test(iban)) {\n        return false; // Invalid country specific format\n      }\n    } // Now check the checksum, first convert to digits\n\n\n    ibancheck = iban.substring(4, iban.length) + iban.substring(0, 4);\n\n    for (i = 0; i < ibancheck.length; i++) {\n      charAt = ibancheck.charAt(i);\n\n      if (charAt !== \"0\") {\n        leadingZeroes = false;\n      }\n\n      if (!leadingZeroes) {\n        ibancheckdigits += \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(charAt);\n      }\n    } // Calculate the result of: ibancheckdigits % 97\n\n\n    for (p = 0; p < ibancheckdigits.length; p++) {\n      cChar = ibancheckdigits.charAt(p);\n      cOperator = \"\" + cRest + \"\" + cChar;\n      cRest = cOperator % 97;\n    }\n\n    return cRest === 1;\n  }, \"Please specify a valid IBAN\");\n  $.validator.addMethod(\"integer\", function (value, element) {\n    return this.optional(element) || /^-?\\d+$/.test(value);\n  }, \"A positive or negative non-decimal number please\");\n  $.validator.addMethod(\"ipv4\", function (value, element) {\n    return this.optional(element) || /^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/i.test(value);\n  }, \"Please enter a valid IP v4 address.\");\n  $.validator.addMethod(\"ipv6\", function (value, element) {\n    return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\n  }, \"Please enter a valid IP v6 address.\");\n  $.validator.addMethod(\"lessThan\", function (value, element, param) {\n    var target = $(param);\n\n    if (this.settings.onfocusout && target.not(\".validate-lessThan-blur\").length) {\n      target.addClass(\"validate-lessThan-blur\").on(\"blur.validate-lessThan\", function () {\n        $(element).valid();\n      });\n    }\n\n    return value < target.val();\n  }, \"Please enter a lesser value.\");\n  $.validator.addMethod(\"lessThanEqual\", function (value, element, param) {\n    var target = $(param);\n\n    if (this.settings.onfocusout && target.not(\".validate-lessThanEqual-blur\").length) {\n      target.addClass(\"validate-lessThanEqual-blur\").on(\"blur.validate-lessThanEqual\", function () {\n        $(element).valid();\n      });\n    }\n\n    return value <= target.val();\n  }, \"Please enter a lesser value.\");\n  $.validator.addMethod(\"lettersonly\", function (value, element) {\n    return this.optional(element) || /^[a-z]+$/i.test(value);\n  }, \"Letters only please\");\n  $.validator.addMethod(\"letterswithbasicpunc\", function (value, element) {\n    return this.optional(element) || /^[a-z\\-.,()'\"\\s]+$/i.test(value);\n  }, \"Letters or punctuation only please\"); // Limit the number of files in a FileList.\n\n  $.validator.addMethod(\"maxfiles\", function (value, element, param) {\n    if (this.optional(element)) {\n      return true;\n    }\n\n    if ($(element).attr(\"type\") === \"file\") {\n      if (element.files && element.files.length > param) {\n        return false;\n      }\n    }\n\n    return true;\n  }, $.validator.format(\"Please select no more than {0} files.\")); // Limit the size of each individual file in a FileList.\n\n  $.validator.addMethod(\"maxsize\", function (value, element, param) {\n    if (this.optional(element)) {\n      return true;\n    }\n\n    if ($(element).attr(\"type\") === \"file\") {\n      if (element.files && element.files.length) {\n        for (var i = 0; i < element.files.length; i++) {\n          if (element.files[i].size > param) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }, $.validator.format(\"File size must not exceed {0} bytes each.\")); // Limit the size of all files in a FileList.\n\n  $.validator.addMethod(\"maxsizetotal\", function (value, element, param) {\n    if (this.optional(element)) {\n      return true;\n    }\n\n    if ($(element).attr(\"type\") === \"file\") {\n      if (element.files && element.files.length) {\n        var totalSize = 0;\n\n        for (var i = 0; i < element.files.length; i++) {\n          totalSize += element.files[i].size;\n\n          if (totalSize > param) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }, $.validator.format(\"Total size of all files must not exceed {0} bytes.\"));\n  $.validator.addMethod(\"mobileNL\", function (value, element) {\n    return this.optional(element) || /^((\\+|00(\\s|\\s?\\-\\s?)?)31(\\s|\\s?\\-\\s?)?(\\(0\\)[\\-\\s]?)?|0)6((\\s|\\s?\\-\\s?)?[0-9]){8}$/.test(value);\n  }, \"Please specify a valid mobile number\");\n  $.validator.addMethod(\"mobileRU\", function (phone_number, element) {\n    var ruPhone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n    return this.optional(element) || ruPhone_number.length > 9 && /^((\\+7|7|8)+([0-9]){10})$/.test(ruPhone_number);\n  }, \"Please specify a valid mobile number\");\n  /* For UK phone functions, do the following server side processing:\n   * Compare original input with this RegEx pattern:\n   * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n   * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n   * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n   * A number of very detailed GB telephone number RegEx patterns can also be found at:\n   * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n   */\n\n  $.validator.addMethod(\"mobileUK\", function (phone_number, element) {\n    phone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n    return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\\s?|\\+)44\\s?|0)7(?:[1345789]\\d{2}|624)\\s?\\d{3}\\s?\\d{3})$/);\n  }, \"Please specify a valid mobile number\");\n  $.validator.addMethod(\"netmask\", function (value, element) {\n    return this.optional(element) || /^(254|252|248|240|224|192|128)\\.0\\.0\\.0|255\\.(254|252|248|240|224|192|128|0)\\.0\\.0|255\\.255\\.(254|252|248|240|224|192|128|0)\\.0|255\\.255\\.255\\.(254|252|248|240|224|192|128|0)/i.test(value);\n  }, \"Please enter a valid netmask.\");\n  /*\n   * The NIE (Número de Identificación de Extranjero) is a Spanish tax identification number assigned by the Spanish\n   * authorities to any foreigner.\n   *\n   * The NIE is the equivalent of a Spaniards Número de Identificación Fiscal (NIF) which serves as a fiscal\n   * identification number. The CIF number (Certificado de Identificación Fiscal) is equivalent to the NIF, but applies to\n   * companies rather than individuals. The NIE consists of an 'X' or 'Y' followed by 7 or 8 digits then another letter.\n   */\n\n  $.validator.addMethod(\"nieES\", function (value, element) {\n    \"use strict\";\n\n    if (this.optional(element)) {\n      return true;\n    }\n\n    var nieRegEx = new RegExp(/^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/gi);\n    var validChars = \"TRWAGMYFPDXBNJZSQVHLCKET\",\n        letter = value.substr(value.length - 1).toUpperCase(),\n        number;\n    value = value.toString().toUpperCase(); // Quick format test\n\n    if (value.length > 10 || value.length < 9 || !nieRegEx.test(value)) {\n      return false;\n    } // X means same number\n    // Y means number + 10000000\n    // Z means number + 20000000\n\n\n    value = value.replace(/^[X]/, \"0\").replace(/^[Y]/, \"1\").replace(/^[Z]/, \"2\");\n    number = value.length === 9 ? value.substr(0, 8) : value.substr(0, 9);\n    return validChars.charAt(parseInt(number, 10) % 23) === letter;\n  }, \"Please specify a valid NIE number.\");\n  /*\n   * The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals\n   */\n\n  $.validator.addMethod(\"nifES\", function (value, element) {\n    \"use strict\";\n\n    if (this.optional(element)) {\n      return true;\n    }\n\n    value = value.toUpperCase(); // Basic format test\n\n    if (!value.match(\"((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)\")) {\n      return false;\n    } // Test NIF\n\n\n    if (/^[0-9]{8}[A-Z]{1}$/.test(value)) {\n      return \"TRWAGMYFPDXBNJZSQVHLCKE\".charAt(value.substring(8, 0) % 23) === value.charAt(8);\n    } // Test specials NIF (starts with K, L or M)\n\n\n    if (/^[KLM]{1}/.test(value)) {\n      return value[8] === \"TRWAGMYFPDXBNJZSQVHLCKE\".charAt(value.substring(8, 1) % 23);\n    }\n\n    return false;\n  }, \"Please specify a valid NIF number.\");\n  /*\n   * Numer identyfikacji podatkowej ( NIP ) is the way tax identification used in Poland for companies\n   */\n\n  $.validator.addMethod(\"nipPL\", function (value) {\n    \"use strict\";\n\n    value = value.replace(/[^0-9]/g, \"\");\n\n    if (value.length !== 10) {\n      return false;\n    }\n\n    var arrSteps = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var intSum = 0;\n\n    for (var i = 0; i < 9; i++) {\n      intSum += arrSteps[i] * value[i];\n    }\n\n    var int2 = intSum % 11;\n    var intControlNr = int2 === 10 ? 0 : int2;\n    return intControlNr === parseInt(value[9], 10);\n  }, \"Please specify a valid NIP number.\");\n  /**\n   * Created for project jquery-validation.\n   * @Description Brazillian PIS or NIS number (Número de Identificação Social Pis ou Pasep) is the equivalent of a\n   * Brazilian tax registration number NIS of PIS numbers have 11 digits in total: 10 numbers followed by 1 check numbers\n   * that are being used for validation.\n   * @copyright (c) 21/08/2018 13:14, Cleiton da Silva Mendonça\n   * @author Cleiton da Silva Mendonça <cleiton.mendonca@gmail.com>\n   * @link http://gitlab.com/csmendonca Gitlab of Cleiton da Silva Mendonça\n   * @link http://github.com/csmendonca Github of Cleiton da Silva Mendonça\n   */\n\n  $.validator.addMethod(\"nisBR\", function (value) {\n    var number;\n    var cn;\n    var sum = 0;\n    var dv;\n    var count;\n    var multiplier; // Removing special characters from value\n\n    value = value.replace(/([~!@#$%^&*()_+=`{}\\[\\]\\-|\\\\:;'<>,.\\/? ])+/g, \"\"); // Checking value to have 11 digits only\n\n    if (value.length !== 11) {\n      return false;\n    } //Get check number of value\n\n\n    cn = parseInt(value.substring(10, 11), 10); //Get number with 10 digits of the value\n\n    number = parseInt(value.substring(0, 10), 10);\n\n    for (count = 2; count < 12; count++) {\n      multiplier = count;\n\n      if (count === 10) {\n        multiplier = 2;\n      }\n\n      if (count === 11) {\n        multiplier = 3;\n      }\n\n      sum += number % 10 * multiplier;\n      number = parseInt(number / 10, 10);\n    }\n\n    dv = sum % 11;\n\n    if (dv > 1) {\n      dv = 11 - dv;\n    } else {\n      dv = 0;\n    }\n\n    if (cn === dv) {\n      return true;\n    } else {\n      return false;\n    }\n  }, \"Please specify a valid NIS/PIS number\");\n  $.validator.addMethod(\"notEqualTo\", function (value, element, param) {\n    return this.optional(element) || !$.validator.methods.equalTo.call(this, value, element, param);\n  }, \"Please enter a different value, values must not be the same.\");\n  $.validator.addMethod(\"nowhitespace\", function (value, element) {\n    return this.optional(element) || /^\\S+$/i.test(value);\n  }, \"No white space please\");\n  /**\n  * Return true if the field value matches the given format RegExp\n  *\n  * @example $.validator.methods.pattern(\"AR1004\",element,/^AR\\d{4}$/)\n  * @result true\n  *\n  * @example $.validator.methods.pattern(\"BR1004\",element,/^AR\\d{4}$/)\n  * @result false\n  *\n  * @name $.validator.methods.pattern\n  * @type Boolean\n  * @cat Plugins/Validate/Methods\n  */\n\n  $.validator.addMethod(\"pattern\", function (value, element, param) {\n    if (this.optional(element)) {\n      return true;\n    }\n\n    if (typeof param === \"string\") {\n      param = new RegExp(\"^(?:\" + param + \")$\");\n    }\n\n    return param.test(value);\n  }, \"Invalid format.\");\n  /**\n   * Dutch phone numbers have 10 digits (or 11 and start with +31).\n   */\n\n  $.validator.addMethod(\"phoneNL\", function (value, element) {\n    return this.optional(element) || /^((\\+|00(\\s|\\s?\\-\\s?)?)31(\\s|\\s?\\-\\s?)?(\\(0\\)[\\-\\s]?)?|0)[1-9]((\\s|\\s?\\-\\s?)?[0-9]){8}$/.test(value);\n  }, \"Please specify a valid phone number.\");\n  /**\n   * Polish telephone numbers have 9 digits.\n   *\n   * Mobile phone numbers starts with following digits:\n   * 45, 50, 51, 53, 57, 60, 66, 69, 72, 73, 78, 79, 88.\n   *\n   * Fixed-line numbers starts with area codes:\n   * 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 29, 32, 33,\n   * 34, 41, 42, 43, 44, 46, 48, 52, 54, 55, 56, 58, 59, 61,\n   * 62, 63, 65, 67, 68, 71, 74, 75, 76, 77, 81, 82, 83, 84,\n   * 85, 86, 87, 89, 91, 94, 95.\n   *\n   * Ministry of National Defence numbers and VoIP numbers starts with 26 and 39.\n   *\n   * Excludes intelligent networks (premium rate, shared cost, free phone numbers).\n   *\n   * Poland National Numbering Plan http://www.itu.int/oth/T02020000A8/en\n   */\n\n  $.validator.addMethod(\"phonePL\", function (phone_number, element) {\n    phone_number = phone_number.replace(/\\s+/g, \"\");\n    var regexp = /^(?:(?:(?:\\+|00)?48)|(?:\\(\\+?48\\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-68]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\\d{7}$/;\n    return this.optional(element) || regexp.test(phone_number);\n  }, \"Please specify a valid phone number\");\n  /* For UK phone functions, do the following server side processing:\n   * Compare original input with this RegEx pattern:\n   * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n   * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n   * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n   * A number of very detailed GB telephone number RegEx patterns can also be found at:\n   * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n   */\n  // Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers\n\n  $.validator.addMethod(\"phonesUK\", function (phone_number, element) {\n    phone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n    return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\\s?|\\+)44\\s?|0)(?:1\\d{8,9}|[23]\\d{9}|7(?:[1345789]\\d{8}|624\\d{6})))$/);\n  }, \"Please specify a valid uk phone number\");\n  /* For UK phone functions, do the following server side processing:\n   * Compare original input with this RegEx pattern:\n   * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n   * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n   * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n   * A number of very detailed GB telephone number RegEx patterns can also be found at:\n   * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n   */\n\n  $.validator.addMethod(\"phoneUK\", function (phone_number, element) {\n    phone_number = phone_number.replace(/\\(|\\)|\\s+|-/g, \"\");\n    return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\\s?|\\+)44\\s?)|(?:\\(?0))(?:\\d{2}\\)?\\s?\\d{4}\\s?\\d{4}|\\d{3}\\)?\\s?\\d{3}\\s?\\d{3,4}|\\d{4}\\)?\\s?(?:\\d{5}|\\d{3}\\s?\\d{3})|\\d{5}\\)?\\s?\\d{4,5})$/);\n  }, \"Please specify a valid phone number\");\n  /**\n   * Matches US phone number format\n   *\n   * where the area code may not start with 1 and the prefix may not start with 1\n   * allows '-' or ' ' as a separator and allows parens around area code\n   * some people may want to put a '1' in front of their number\n   *\n   * 1(212)-999-2345 or\n   * 212 999 2344 or\n   * 212-999-0983\n   *\n   * but not\n   * 111-123-5434\n   * and not\n   * 212 123 4567\n   */\n\n  $.validator.addMethod(\"phoneUS\", function (phone_number, element) {\n    phone_number = phone_number.replace(/\\s+/g, \"\");\n    return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]\\d{2}-?\\d{4}$/);\n  }, \"Please specify a valid phone number\");\n  /*\n  * Valida CEPs do brasileiros:\n  *\n  * Formatos aceitos:\n  * 99999-999\n  * 99.999-999\n  * 99999999\n  */\n\n  $.validator.addMethod(\"postalcodeBR\", function (cep_value, element) {\n    return this.optional(element) || /^\\d{2}.\\d{3}-\\d{3}?$|^\\d{5}-?\\d{3}?$/.test(cep_value);\n  }, \"Informe um CEP válido.\");\n  /**\n   * Matches a valid Canadian Postal Code\n   *\n   * @example jQuery.validator.methods.postalCodeCA( \"H0H 0H0\", element )\n   * @result true\n   *\n   * @example jQuery.validator.methods.postalCodeCA( \"H0H0H0\", element )\n   * @result false\n   *\n   * @name jQuery.validator.methods.postalCodeCA\n   * @type Boolean\n   * @cat Plugins/Validate/Methods\n   */\n\n  $.validator.addMethod(\"postalCodeCA\", function (value, element) {\n    return this.optional(element) || /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ] *\\d[ABCEGHJKLMNPRSTVWXYZ]\\d$/i.test(value);\n  }, \"Please specify a valid postal code\");\n  /* Matches Italian postcode (CAP) */\n\n  $.validator.addMethod(\"postalcodeIT\", function (value, element) {\n    return this.optional(element) || /^\\d{5}$/.test(value);\n  }, \"Please specify a valid postal code\");\n  $.validator.addMethod(\"postalcodeNL\", function (value, element) {\n    return this.optional(element) || /^[1-9][0-9]{3}\\s?[a-zA-Z]{2}$/.test(value);\n  }, \"Please specify a valid postal code\"); // Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)\n\n  $.validator.addMethod(\"postcodeUK\", function (value, element) {\n    return this.optional(element) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\\s?(0AA))$/i.test(value);\n  }, \"Please specify a valid UK postcode\");\n  /*\n   * Lets you say \"at least X inputs that match selector Y must be filled.\"\n   *\n   * The end result is that neither of these inputs:\n   *\n   *\t<input class=\"productinfo\" name=\"partnumber\">\n   *\t<input class=\"productinfo\" name=\"description\">\n   *\n   *\t...will validate unless at least one of them is filled.\n   *\n   * partnumber:\t{require_from_group: [1,\".productinfo\"]},\n   * description: {require_from_group: [1,\".productinfo\"]}\n   *\n   * options[0]: number of fields that must be filled in the group\n   * options[1]: CSS selector that defines the group of conditionally required fields\n   */\n\n  $.validator.addMethod(\"require_from_group\", function (value, element, options) {\n    var $fields = $(options[1], element.form),\n        $fieldsFirst = $fields.eq(0),\n        validator = $fieldsFirst.data(\"valid_req_grp\") ? $fieldsFirst.data(\"valid_req_grp\") : $.extend({}, this),\n        isValid = $fields.filter(function () {\n      return validator.elementValue(this);\n    }).length >= options[0]; // Store the cloned validator for future validation\n\n    $fieldsFirst.data(\"valid_req_grp\", validator); // If element isn't being validated, run each require_from_group field's validation rules\n\n    if (!$(element).data(\"being_validated\")) {\n      $fields.data(\"being_validated\", true);\n      $fields.each(function () {\n        validator.element(this);\n      });\n      $fields.data(\"being_validated\", false);\n    }\n\n    return isValid;\n  }, $.validator.format(\"Please fill at least {0} of these fields.\"));\n  /*\n   * Lets you say \"either at least X inputs that match selector Y must be filled,\n   * OR they must all be skipped (left blank).\"\n   *\n   * The end result, is that none of these inputs:\n   *\n   *\t<input class=\"productinfo\" name=\"partnumber\">\n   *\t<input class=\"productinfo\" name=\"description\">\n   *\t<input class=\"productinfo\" name=\"color\">\n   *\n   *\t...will validate unless either at least two of them are filled,\n   *\tOR none of them are.\n   *\n   * partnumber:\t{skip_or_fill_minimum: [2,\".productinfo\"]},\n   * description: {skip_or_fill_minimum: [2,\".productinfo\"]},\n   * color:\t\t{skip_or_fill_minimum: [2,\".productinfo\"]}\n   *\n   * options[0]: number of fields that must be filled in the group\n   * options[1]: CSS selector that defines the group of conditionally required fields\n   *\n   */\n\n  $.validator.addMethod(\"skip_or_fill_minimum\", function (value, element, options) {\n    var $fields = $(options[1], element.form),\n        $fieldsFirst = $fields.eq(0),\n        validator = $fieldsFirst.data(\"valid_skip\") ? $fieldsFirst.data(\"valid_skip\") : $.extend({}, this),\n        numberFilled = $fields.filter(function () {\n      return validator.elementValue(this);\n    }).length,\n        isValid = numberFilled === 0 || numberFilled >= options[0]; // Store the cloned validator for future validation\n\n    $fieldsFirst.data(\"valid_skip\", validator); // If element isn't being validated, run each skip_or_fill_minimum field's validation rules\n\n    if (!$(element).data(\"being_validated\")) {\n      $fields.data(\"being_validated\", true);\n      $fields.each(function () {\n        validator.element(this);\n      });\n      $fields.data(\"being_validated\", false);\n    }\n\n    return isValid;\n  }, $.validator.format(\"Please either skip these fields or fill at least {0} of them.\"));\n  /* Validates US States and/or Territories by @jdforsythe\n   * Can be case insensitive or require capitalization - default is case insensitive\n   * Can include US Territories or not - default does not\n   * Can include US Military postal abbreviations (AA, AE, AP) - default does not\n   *\n   * Note: \"States\" always includes DC (District of Colombia)\n   *\n   * Usage examples:\n   *\n   *  This is the default - case insensitive, no territories, no military zones\n   *  stateInput: {\n   *     caseSensitive: false,\n   *     includeTerritories: false,\n   *     includeMilitary: false\n   *  }\n   *\n   *  Only allow capital letters, no territories, no military zones\n   *  stateInput: {\n   *     caseSensitive: false\n   *  }\n   *\n   *  Case insensitive, include territories but not military zones\n   *  stateInput: {\n   *     includeTerritories: true\n   *  }\n   *\n   *  Only allow capital letters, include territories and military zones\n   *  stateInput: {\n   *     caseSensitive: true,\n   *     includeTerritories: true,\n   *     includeMilitary: true\n   *  }\n   *\n   */\n\n  $.validator.addMethod(\"stateUS\", function (value, element, options) {\n    var isDefault = typeof options === \"undefined\",\n        caseSensitive = isDefault || typeof options.caseSensitive === \"undefined\" ? false : options.caseSensitive,\n        includeTerritories = isDefault || typeof options.includeTerritories === \"undefined\" ? false : options.includeTerritories,\n        includeMilitary = isDefault || typeof options.includeMilitary === \"undefined\" ? false : options.includeMilitary,\n        regex;\n\n    if (!includeTerritories && !includeMilitary) {\n      regex = \"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";\n    } else if (includeTerritories && includeMilitary) {\n      regex = \"^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\";\n    } else if (includeTerritories) {\n      regex = \"^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$\";\n    } else {\n      regex = \"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$\";\n    }\n\n    regex = caseSensitive ? new RegExp(regex) : new RegExp(regex, \"i\");\n    return this.optional(element) || regex.test(value);\n  }, \"Please specify a valid state\"); // TODO check if value starts with <, otherwise don't try stripping anything\n\n  $.validator.addMethod(\"strippedminlength\", function (value, element, param) {\n    return $(value).text().length >= param;\n  }, $.validator.format(\"Please enter at least {0} characters\"));\n  $.validator.addMethod(\"time\", function (value, element) {\n    return this.optional(element) || /^([01]\\d|2[0-3]|[0-9])(:[0-5]\\d){1,2}$/.test(value);\n  }, \"Please enter a valid time, between 00:00 and 23:59\");\n  $.validator.addMethod(\"time12h\", function (value, element) {\n    return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){1,2}(\\ ?[AP]M))$/i.test(value);\n  }, \"Please enter a valid time in 12-hour am/pm format\"); // Same as url, but TLD is optional\n\n  $.validator.addMethod(\"url2\", function (value, element) {\n    return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\n  }, $.validator.messages.url);\n  /**\n   * Return true, if the value is a valid vehicle identification number (VIN).\n   *\n   * Works with all kind of text inputs.\n   *\n   * @example <input type=\"text\" size=\"20\" name=\"VehicleID\" class=\"{required:true,vinUS:true}\" />\n   * @desc Declares a required input element whose value must be a valid vehicle identification number.\n   *\n   * @name $.validator.methods.vinUS\n   * @type Boolean\n   * @cat Plugins/Validate/Methods\n   */\n\n  $.validator.addMethod(\"vinUS\", function (v) {\n    if (v.length !== 17) {\n      return false;\n    }\n\n    var LL = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"],\n        VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],\n        FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\n        rs = 0,\n        i,\n        n,\n        d,\n        f,\n        cd,\n        cdv;\n\n    for (i = 0; i < 17; i++) {\n      f = FL[i];\n      d = v.slice(i, i + 1);\n\n      if (i === 8) {\n        cdv = d;\n      }\n\n      if (!isNaN(d)) {\n        d *= f;\n      } else {\n        for (n = 0; n < LL.length; n++) {\n          if (d.toUpperCase() === LL[n]) {\n            d = VL[n];\n            d *= f;\n\n            if (isNaN(cdv) && n === 8) {\n              cdv = LL[n];\n            }\n\n            break;\n          }\n        }\n      }\n\n      rs += d;\n    }\n\n    cd = rs % 11;\n\n    if (cd === 10) {\n      cd = \"X\";\n    }\n\n    if (cd === cdv) {\n      return true;\n    }\n\n    return false;\n  }, \"The specified vehicle identification number (VIN) is invalid.\");\n  $.validator.addMethod(\"zipcodeUS\", function (value, element) {\n    return this.optional(element) || /^\\d{5}(-\\d{4})?$/.test(value);\n  }, \"The specified US ZIP Code is invalid\");\n  $.validator.addMethod(\"ziprange\", function (value, element) {\n    return this.optional(element) || /^90[2-5]\\d\\{2\\}-\\d{4}$/.test(value);\n  }, \"Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx\");\n  return $;\n});"]}